import pygame
import sys

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 800
ROWS, COLS = 8, 8
SQUARE_SIZE = WIDTH // COLS

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

# Create the screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pygame Chess")


class ChessPiece:
    def __init__(self, color, symbol, value):
        self.color = color
        self.symbol = symbol
        self.value = value
        self.has_moved = False


class ChessBoard:
    def __init__(self):
        self.board = [[None for _ in range(8)] for _ in range(8)]
        self.current_player = RED
        self.selected_piece = None
        self.valid_moves = []
        self.setup_board()

    def setup_board(self):
        piece_order = [
            ("R", 5), ("N", 3), ("B", 3), ("Q", 9), ("K", 100), ("B", 3), ("N", 3), ("R", 5)
        ]
        for i in range(8):
            self.board[0][i] = ChessPiece(RED, piece_order[i][0], piece_order[i][1])
            self.board[1][i] = ChessPiece(RED, "P", 1)
            self.board[6][i] = ChessPiece(BLUE, "P", 1)
            self.board[7][i] = ChessPiece(BLUE, piece_order[i][0], piece_order[i][1])

    def is_valid_move(self, start, end):
        start_row, start_col = start
        end_row, end_col = end
        piece = self.board[start_row][start_col]

        if not piece or piece.color != self.current_player:
            return False

        if self.board[end_row][end_col] and self.board[end_row][end_col].color == self.current_player:
            return False

        if piece.symbol == "P":  # Pawn
            direction = 1 if piece.color == RED else -1
            if start_col == end_col and not self.board[end_row][end_col]:
                if end_row == start_row + direction:
                    return True
                if not piece.has_moved and end_row == start_row + 2 * direction and not \
                self.board[start_row + direction][start_col]:
                    return True
            if abs(start_col - end_col) == 1 and end_row == start_row + direction:
                return self.board[end_row][end_col] is not None
        elif piece.symbol == "R":  # Rook
            return self.is_clear_path(start, end)
        elif piece.symbol == "N":  # Knight
            return (abs(start_row - end_row) == 2 and abs(start_col - end_col) == 1) or \
                (abs(start_row - end_row) == 1 and abs(start_col - end_col) == 2)
        elif piece.symbol == "B":  # Bishop
            return abs(start_row - end_row) == abs(start_col - end_col) and self.is_clear_path(start, end)
        elif piece.symbol == "Q":  # Queen
            return self.is_clear_path(start, end)
        elif piece.symbol == "K":  # King
            return abs(start_row - end_row) <= 1 and abs(start_col - end_col) <= 1

        return False

    def is_clear_path(self, start, end):
        start_row, start_col = start
        end_row, end_col = end
        row_step = 1 if end_row > start_row else -1 if end_row < start_row else 0
        col_step = 1 if end_col > start_col else -1 if end_col < start_col else 0

        row, col = start_row + row_step, start_col + col_step
        while (row, col) != (end_row, end_col):
            if self.board[row][col]:
                return False
            row += row_step
            col += col_step

        return True

    def make_move(self, start, end):
        if self.is_valid_move(start, end):
            start_row, start_col = start
            end_row, end_col = end
            piece = self.board[start_row][start_col]

            # Move the piece
            self.board[end_row][end_col] = piece
            self.board[start_row][start_col] = None
            piece.has_moved = True

            # Check for pawn promotion
            if piece.symbol == "P" and (end_row == 7 or end_row == 0):
                self.board[end_row][end_col] = ChessPiece(piece.color, "Q", 9)  # Promote to Queen

            # Switch players
            self.current_player = BLUE if self.current_player == RED else RED
            self.selected_piece = None
            self.valid_moves = []
            return True
        return False

    def get_valid_moves(self, row, col):
        valid_moves = []
        for end_row in range(8):
            for end_col in range(8):
                if self.is_valid_move((row, col), (end_row, end_col)):
                    valid_moves.append((end_row, end_col))
        return valid_moves

    def is_check(self, color):
        king_pos = None
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece and piece.color == color and piece.symbol == "K":
                    king_pos = (row, col)
                    break
            if king_pos:
                break

        opponent_color = BLUE if color == RED else RED
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece and piece.color == opponent_color:
                    if self.is_valid_move((row, col), king_pos):
                        return True
        return False

    def is_checkmate(self, color):
        if not self.is_check(color):
            return False

        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece and piece.color == color:
                    valid_moves = self.get_valid_moves(row, col)
                    for move in valid_moves:
                        # Try the move
                        original_piece = self.board[move[0]][move[1]]
                        self.board[move[0]][move[1]] = piece
                        self.board[row][col] = None

                        still_in_check = self.is_check(color)

                        # Undo the move
                        self.board[row][col] = piece
                        self.board[move[0]][move[1]] = original_piece

                        if not still_in_check:
                            return False
        return True


def draw_board(screen, board):
    for row in range(ROWS):
        for col in range(COLS):
            color = WHITE if (row + col) % 2 == 0 else GRAY
            pygame.draw.rect(screen, color, (col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

            piece = board.board[row][col]
            if piece:
                font = pygame.font.Font(None, 72)
                text = font.render(piece.symbol, True, piece.color)
                text_rect = text.get_rect(
                    center=(col * SQUARE_SIZE + SQUARE_SIZE // 2, row * SQUARE_SIZE + SQUARE_SIZE // 2))
                screen.blit(text, text_rect)

    if board.selected_piece:
        row, col = board.selected_piece
        pygame.draw.rect(screen, GREEN, (col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE), 4)

        for move in board.valid_moves:
            move_row, move_col = move
            pygame.draw.circle(screen, YELLOW,
                               (move_col * SQUARE_SIZE + SQUARE_SIZE // 2,
                                move_row * SQUARE_SIZE + SQUARE_SIZE // 2),
                               10)


def draw_status(screen, board):
    font = pygame.font.Font(None, 36)
    current_player = "Red" if board.current_player == RED else "Blue"
    text = font.render(f"Current Player: {current_player}", True, BLACK)
    screen.blit(text, (10, HEIGHT - 40))

    if board.is_check(board.current_player):
        if board.is_checkmate(board.current_player):
            status = f"Checkmate! {current_player} loses!"
        else:
            status = f"{current_player} is in check!"
        text = font.render(status, True, RED)
        screen.blit(text, (WIDTH - 300, HEIGHT - 40))


def main():
    clock = pygame.time.Clock()
    board = ChessBoard()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                col = event.pos[0] // SQUARE_SIZE
                row = event.pos[1] // SQUARE_SIZE

                if board.selected_piece:
                    start = board.selected_piece
                    end = (row, col)
                    if board.make_move(start, end):
                        pass  # Move made successfully
                    else:
                        board.selected_piece = None
                        board.valid_moves = []
                else:
                    piece = board.board[row][col]
                    if piece and piece.color == board.current_player:
                        board.selected_piece = (row, col)
                        board.valid_moves = board.get_valid_moves(row, col)

        screen.fill(WHITE)
        draw_board(screen, board)
        draw_status(screen, board)
        pygame.display.flip()
        clock.tick(60)


if __name__ == "__main__":
    main()
